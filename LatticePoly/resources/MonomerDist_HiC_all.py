# -*- coding: utf-8 -*-### MonomerDist.py# LatticePoly### Based on mtortora's code.# Copyright Â© 2021 ENS Lyon. All rights reserved.##import osimport sysimport numpy as npfrom scipy.spatial import cKDTreefrom vtkReader import vtkReaderfrom scipy.spatial.distance import pdist, squareformclass MonomerDmap():    def __init__(self, outputDir, initFrame):        self.reader = vtkReader(outputDir, initFrame,                                readLiq=False, readPoly=True)        #self.anisoFile = os.path.join(self.reader.outputDir, "polyAniso.res")        self.contactFile = os.path.join(self.reader.outputDir, str(round(initFrame))+"_"+str(round(finalFrame))+"contactProb_z_all.res")        if os.path.exists(self.contactFile):            print("Files %s' already exist - aborting" % (self.contactFile))            sys.exit()        self.Nchain=0        for t in range(self.reader.nTad):            if(self.reader.status[t]==-1 or self.reader.status[t]==0):                self.Nchain+=1		    def Compute(self,finalFrame):        #self.polyAniso = np.zeros((self.reader.N, self.reader.nDom), dtype=np.float32)        self.contactProb = np.zeros((self.Nchain, self.Nchain), dtype=np.float32)                for i in range(0, finalFrame-initFrame):            self.ProcessFrame(i)            if (i+1) % 10 == 0:                print("Processed %d out of %d configurations" %                      (i+1, finalFrame-initFrame))    def ProcessFrame(self, i):        data = next(self.reader)        tree1   = cKDTree(data.polyPos[:], boxsize = None)        pairs = tree1.query_pairs(r = 3.53) # NN distance FCC lattice 1/np.sqrt(2) = 0.71        for (i,j) in pairs:            k=i            z=j            if(i>=self.Nchain):                k=data.SisterID[i]            if(j>=self.Nchain):                z=data.SisterID[j]            if(k!=z):                self.contactProb[k,z] = self.contactProb[k,z] + 1                self.contactProb[z,k] = self.contactProb[z,k] + 1    def Print(self):        np.savetxt(self.contactFile, self.contactProb )        print("\033[1;32mPrinted avg.contact probability to '%s'\033[0m" %self.contactFile)if __name__ == "__main__":    if len(sys.argv) != 4:        print("\033[1;31mUsage is %s outputDir initFrame finalFrame \033[0m" % sys.argv[0])        sys.exit()    outputDir = sys.argv[1]    initFrame = int(sys.argv[2])    finalFrame = int(sys.argv[3])    monom = MonomerDmap(outputDir, initFrame=initFrame)    monom.Compute(finalFrame)    monom.Print()